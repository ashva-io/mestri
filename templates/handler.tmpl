// Code generated by Mestri; DO NOT EDIT.
// This file was generated by Mestri robots at
// {{ .Timestamp }}
package {{ .Entity }}
import (
	"fmt"
    "strconv"
	"net/http"
	"github.com/labstack/echo/v4"
    "github.com/heraju/mestri/domain"
	"github.com/sirupsen/logrus"
)

// ResponseError represent the reseponse error struct
type ResponseError struct {
	Message string `json:"message"`
}

// ArticleHandler  represent the httphandler for article
type {{.ModelName}}Handler struct {
	UseCase Usecase
}

// {{.ModelName}}Handler will initialize the articles/ resources endpoint
func New{{.ModelName}}Handler(e *echo.Echo, us Usecase) {
	handler := &{{.ModelName}}Handler{UseCase: us}

    e.GET("/{{.Entity}}", handler.Index)
	e.GET("/{{.Entity}}/:id", handler.Get)
    
}

// Index will fetch the {{.Entity}} based on given params
func (a *{{.ModelName}}Handler) Index(c echo.Context) error {
    fmt.Println("INDEX {{.ModelName}} CALLED ")
	numS := c.QueryParam("num")
	num, _ := strconv.Atoi(numS)
	cursor := c.QueryParam("cursor")
	ctx := c.Request().Context()

	listAr, nextCursor, err := a.UseCase.Index(ctx, cursor, int64(num))
	if err != nil {
		return c.JSON(getStatusCode(err), ResponseError{Message: err.Error()})
	}

	c.Response().Header().Set(`X-Cursor`, nextCursor)
	return c.JSON(http.StatusOK, listAr)
}

// Get will get {{.Entity}} by given id
func (a *{{.ModelName}}Handler) Get(c echo.Context) error {
    
	idP, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		return c.JSON(http.StatusNotFound, domain.ErrNotFound.Error())
	}

	id := int64(idP)
	ctx := c.Request().Context()
    fmt.Println("GET {{.ModelName}} CALLED ")
    fmt.Println(id)
	art, err := a.UseCase.Get(ctx, id)
	if err != nil {
		return c.JSON(getStatusCode(err), ResponseError{Message: err.Error()})
	}

	return c.JSON(http.StatusOK, art)
}


func getStatusCode(err error) int {
	if err == nil {
		return http.StatusOK
	}

	logrus.Error(err)
	switch err {
	case domain.ErrInternalServerError:
		return http.StatusInternalServerError
	case domain.ErrNotFound:
		return http.StatusNotFound
	case domain.ErrConflict:
		return http.StatusConflict
	default:
		return http.StatusInternalServerError
	}
}