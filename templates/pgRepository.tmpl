// Code generated by Mestri; DO NOT EDIT.
// This file was generated by Mestri robots at
// {{ .Timestamp }}
package {{ .Entity }}
import (
	"context"
	"database/sql"
	

	"github.com/sirupsen/logrus"
    "github.com/heraju/mestri/domain"
    
    _ "github.com/lib/pq"
)

type {{.ModelName}}PgRepository struct {
	Conn *sql.DB
}

// NewPgRepository will create an object that represent the article.Repository interface
func NewPgRepository(Conn *sql.DB) Repository {
	return &{{.ModelName}}PgRepository{Conn}
}

func (m *{{.ModelName}}PgRepository) fetch(ctx context.Context, query string, args ...interface{}) (result []Entity, err error) {
	rows, err := m.Conn.QueryContext(ctx, query, args...)
	if err != nil {
		logrus.Error(err)
		return nil, err
	}

	defer func() {
		errRow := rows.Close()
		if errRow != nil {
			logrus.Error(errRow)
		}
	}()

	result = make([]Entity, 0)
	for rows.Next() {
		t := Entity{}
		err = rows.Scan(
			&t.Id)

		if err != nil {
			logrus.Error(err)
			return nil, err
		}
        
		result = append(result, t)
	}

	return result, nil
}

func (m *{{.ModelName}}PgRepository) Index(ctx context.Context, cursor string, num int64) (res []Entity, nextCursor string, err error) {
	query := `SELECT id FROM {{ .Entity }} `

	//decodedCursor, err := helpers.DecodeCursor(cursor)
	//if err != nil && cursor != "" {
	//	return nil, "", domain.ErrBadParamInput
	//}
	
	res, err = m.fetch(ctx, query)
	if err != nil {
		return nil, "", err
	}

	if len(res) == int(num) {
		nextCursor = "next"//helpers.EncodeCursor(res[len(res)-1].Id)
	}

	return
}

func (m *{{.ModelName}}PgRepository) Get(ctx context.Context, id int64) (res Entity, err error) {
	query := `SELECT id FROM {{ .Entity }} WHERE ID = $1`

	list, err := m.fetch(ctx, query, id)
	if err != nil {
		return Entity{}, err
	}

	if len(list) > 0 {
		res = list[0]
	} else {
		return res, domain.ErrNotFound
	}

	return
}